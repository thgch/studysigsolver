#ifndef _SIGNATURE_H
#define _SIGNATURE_H

// Sparse Basis calculated by Ben Graham and Jeremy Reizenstein using libalgebra
// - http://sourceforge.net/projects/coropa/files/?source=navbar
//

#include <iostream>
#include <vector>
#include <cassert>

int powi[6][20] = {
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288},
    {1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, -1, -1, -1, -1, -1},
    {1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, -1, -1, -1, -1, -1, -1, -1, -1, -1}
};

int sigdim(int d, int depth) {

    // d ^ (depth + 1) - 1 / (d - 1) = d ^ depth + d ^ (depth - 2) + ... + 1
    if (d == 1 || d == 0)
        return depth + 1;
    else if (d <= 5) {
        return (powi[d][depth + 1] - d) / (d - 1);
    }
    else {
        return ((int)pow(d, depth + 1) - d) / (d - 1);
    }
}

//float logdimsizes[5][5] = {
//    { 3,  5,  8, 14, 23},
//    { 6, 14, 32, 80, -1},
//    {10, 30, 90, -1, -1},
//    {15, 55, -1, -1, -1},
//    {21, -1, -1, -1, -1}
//};

float logdimsizes[5][12] = {
    {1,  1,  1,   1,   1,     1,      1,      1,       1,         1,         1,          1},
    {2,  3,  5,   8,  14,    23,     41,     71,     127,       226,       412,        747},
    {3,  6, 14,  32,  80,   196,    508,  1'318,   3'502,     9'382,    25'486,     69'706},
    {4, 10, 30,  90, 294,   964,  3'304, 11'464,  40'584,   145'338,   526'638,  1'924'378},
    {5, 15, 55, 205, 829, 3'409, 14'569, 63'319, 280'319, 1'256'567, 5'695'487, 26'039'187}
};

int logsigdim(int d, int depth) { 
    //return logdimsizes[d - 2][depth - 2];
    return logdimsizes[d - 1][depth - 1];
}

void additiveKron(float* a, float* b, float* c, int m, int n) {
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            c[i + j * m] += a[i] * b[j];
        }
    }
}

void signatureAdditiveKron(float* a, int i, float* b, int j, float* c, int d) {
    additiveKron(a + sigdim(d, i - 1), b + sigdim(d, j - 1), c + sigdim(d, i + j - 1), powi[d][i], powi[d][j]);
}

// Assume the 0-tensor for sig1 and sig2 are both equal to one.
void signatureProduct(float* sig1, float* sig2, int d, int depth) {
    // sig1 inplace, times sig2
    for (int i = depth; i > 0; i--)
        for (int j = 1; j <= i; ++j)
            signatureAdditiveKron(sig1, i - j, sig2, j, sig1, d);
}

void multiplicativeKron(float* a, int m, float* b, int n, float* c, float alpha) {
    for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
            c[i + j * m] = alpha * a[i] * b[j];
}

void oneStepSignature(float* sig, float* delta, int d, int depth) {
    sig[0] = 1;
    for (int m = 1; m <= depth; ++m)
		multiplicativeKron(sig + sigdim(d, m - 2), powi[d][m - 1], delta, d, sig + sigdim(d, m - 1), 1.0f / m);
}

void signature(float* path, int length, int d, int depth, float* sig) {
    // path: discrete time path (reshaped to 1-dim array)
    // lengtg: length of path
    // d: dimension of path
    // depth: order of signature
    std::vector<float> delta(depth);
    std::vector<float> sigIncrement(sigdim(d, depth));
    sig[0] = 1;
    for (int i = 1; i < sigdim(d, depth); ++i)
        sig[i] = 0;
    for (int i = 1; i < length; ++i) {
        for (int j = 0; j < d; ++j) {
            delta[j] = path[i * d + j] - path[(i - 1) * d + j];
        }
        oneStepSignature(&sigIncrement[0], &delta[0], d, depth);
        signatureProduct(sig, &sigIncrement[0], d, depth);
    }
}

void zeroLayer(float* tensor, int d, int depth) {
    for (int i = sigdim(d, depth - 1); i < sigdim(d, depth); ++i)
        tensor[i] = 0;
}
void tensorLog(float* tensor, float* logTensor, int d, int depth) {
    std::vector<float> pwr(sigdim(d, depth));
    logTensor[0] = 0;
    for (int i = 1; i < sigdim(d, depth); ++i) {
        logTensor[i] = tensor[i];
        pwr[i] = tensor[i];
    }
    for (int j = 2; j <= depth; ++j) {
        for (int k = depth; k >= j; --k) {
            zeroLayer(&pwr[0], d, k);
            for (int l = 1; l < k; ++l) {
                signatureAdditiveKron(tensor, l, &pwr[0], k - l, &pwr[0], d);
            }
        }
        zeroLayer(&pwr[0], d, j - 1);
        for (int i = 1; i < sigdim(d, depth); ++i) {
            logTensor[i] += pwr[i] * (j % 2 == 1 ? 1.0f : -1.0f) / j;
        }
    }
}

int sparseBasisD2[] = {
//   0,   1,       2,  3,   4,       5,       6,       7,       8,
     0,   1,  720720,  1,   2,  720720,       2,       4,  360360,
     2,   5, -360360,  3,   8,  240240,       3,       9, -240240,
     4,  12,  240240,  4,  13, -240240,       5,      16,  180180,
     5,  17, -180180,  6,  20,  180180,       6,      21, -180180,
     6,  24,  180180,  6,  25, -180180,       7,      28,  180180,
     7,  29, -180180,  8,  32,  144144,       8,      33, -144144,
     9,  36,  144144, 12,  36,  144144,       9,      37, -144144,
    12,  37, -144144,  9,  40,  144144,      12,      40,  144144,
     9,  41, -144144, 12,  41, -144144,      10,      44,  144144,
    13,  44,  144144, 10,  45, -144144,      13,      45, -144144,
     9,  48,  144144,  9,  49, -144144,      10,      52,  144144,
    10,  53, -144144, 10,  56,  144144,      10,      57, -144144,
    11,  60,  144144, 11,  61, -144144,      14,      64,  120120,
    14,  65, -120120, 15,  68,  120120,      19,      68,  240240,
    15,  69, -120120, 19,  69, -240240,      15,      72,  120120,
    19,  72,  240240, 15,  73, -120120,      19,      73, -240240,
    16,  76,  120120, 20,  76,  360360,      16,      77, -120120,
    20,  77, -360360, 15,  80,  120120,      19,      80,  120120,
    15,  81, -120120, 19,  81, -120120,      16,      84,  120120,
    20,  84,  240240, 22,  84, -120120,      16,      85, -120120,
    20,  85, -240240, 22,  85,  120120,      16,      88,  120120,
    20,  88,  240240, 22,  88, -120120,      16,      89, -120120,
    20,  89, -240240, 22,  89,  120120,      17,      92,  120120,
    21,  92,  240240, 17,  93, -120120,      21,      93, -240240,
    15,  96,  120120, 15,  97, -120120,      16,     100,  120120,
    20, 100,  120120, 22, 100, -120120,      16,     101, -120120,
    20, 101, -120120, 22, 101,  120120,      16,     104,  120120,
    20, 104,  120120, 22, 104, -120120,      16,     105, -120120,
    20, 105, -120120, 22, 105,  120120,      17,     108,  120120,
    21, 108,  120120, 17, 109, -120120,      21,     109, -120120,
    16, 112,  120120, 16, 113, -120120,      17,     116,  120120,
    17, 117, -120120, 17, 120,  120120,      17,     121, -120120,
    18, 124,  120120, 18, 125, -120120, 1000000, 1000000,       0
};

//int sparseBasisD2[] = {
//    0,  1,   720720,  1,  2,   720720,  2,       4,       360360,
//    2,  5,   -360360, 3,  8,   240240,  3,       9,       -240240,
//    4,  12,  240240,  4,  13,  -240240, 5,       16,      180180,
//    5,  17,  -180180, 6,  20,  180180,  6,       21,      -180180,
//    6,  24,  180180,  6,  25,  -180180, 7,       28,      180180,
//    7,  29,  -180180, 8,  32,  144144,  8,       33,      -144144,
//    9,  36,  144144,  12, 36,  144144,  9,       37,      -144144,
//    12, 37,  -144144, 9,  40,  144144,  12,      40,      144144,
//    9,  41,  -144144, 12, 41,  -144144, 10,      44,      144144,
//    13, 44,  144144,  10, 45,  -144144, 13,      45,      -144144,
//    9,  48,  144144,  9,  49,  -144144, 10,      52,      144144,
//    10, 53,  -144144, 10, 56,  144144,  10,      57,      -144144,
//    11, 60,  144144,  11, 61,  -144144, 14,      64,      120120,
//    14, 65,  -120120, 15, 68,  120120,  19,      68,      240240,
//    15, 69,  -120120, 19, 69,  -240240, 15,      72,      120120,
//    19, 72,  240240,  15, 73,  -120120, 19,      73,      -240240,
//    16, 76,  120120,  20, 76,  360360,  16,      77,      -120120,
//    20, 77,  -360360, 15, 80,  120120,  19,      80,      120120,
//    15, 81,  -120120, 19, 81,  -120120, 16,      84,      120120,
//    20, 84,  240240,  22, 84,  -120120, 16,      85,      -120120,
//    20, 85,  -240240, 22, 85,  120120,  16,      88,      120120,
//    20, 88,  240240,  22, 88,  -120120, 16,      89,      -120120,
//    20, 89,  -240240, 22, 89,  120120,  17,      92,      120120,
//    21, 92,  240240,  17, 93,  -120120, 21,      93,      -240240,
//    15, 96,  120120,  15, 97,  -120120, 16,      100,     120120,
//    20, 100, 120120,  22, 100, -120120, 16,      101,     -120120,
//    20, 101, -120120, 22, 101, 120120,  16,      104,     120120,
//    20, 104, 120120,  22, 104, -120120, 16,      105,     -120120,
//    20, 105, -120120, 22, 105, 120120,  17,      108,     120120,
//    21, 108, 120120,  17, 109, -120120, 21,      109,     -120120,
//    16, 112, 120120,  16, 113, -120120, 17,      116,     120120,
//    17, 117, -120120, 17, 120, 120120,  17,      121,     -120120,
//    18, 124, 120120,  18, 125, -120120, 1000000, 1000000, 0 };

int sparseBasisD3[] = {
    0,  1,   720720,  1,  2,   720720,  2,       3,       720720,
    3,  5,   360360,  4,  6,   360360,  3,       7,       -360360,
    5,  9,   360360,  4,  10,  -360360, 5,       11,      -360360,
    6,  14,  240240,  7,  15,  240240,  6,       16,      -240240,
    9,  18,  240240,  11, 18,  -240240, 7,       19,      -240240,
    9,  20,  -240240, 11, 20,  240240,  8,       23,      240240,
    9,  24,  240240,  8,  25,  -240240, 10,      27,      240240,
    9,  28,  -240240, 10, 29,  -240240, 11,      32,      240240,
    12, 33,  240240,  11, 34,  -240240, 13,      36,      240240,
    12, 37,  -240240, 13, 38,  -240240, 14,      41,      180180,
    15, 42,  180180,  14, 43,  -180180, 17,      45,      180180,
    21, 45,  -180180, 29, 45,  360360,  15,      46,      -180180,
    17, 47,  -180180, 21, 47,  180180,  29,      47,      -360360,
    16, 50,  180180,  17, 51,  180180,  29,      51,      180180,
    16, 52,  -180180, 19, 54,  180180,  23,      54,      -180180,
    30, 54,  360360,  17, 55,  -180180, 29,      55,      -180180,
    19, 56,  -180180, 23, 56,  180180,  30,      56,      -360360,
    21, 59,  180180,  29, 59,  -180180, 22,      60,      180180,
    21, 61,  -180180, 29, 61,  180180,  24,      63,      180180,
    26, 63,  -180180, 31, 63,  180180,  22,      64,      -180180,
    24, 65,  -180180, 26, 65,  180180,  31,      65,      -180180,
    16, 68,  180180,  17, 69,  180180,  16,      70,      -180180,
    19, 72,  180180,  23, 72,  -180180, 30,      72,      180180,
    17, 73,  -180180, 19, 74,  -180180, 23,      74,      180180,
    30, 74,  -180180, 18, 77,  180180,  19,      78,      180180,
    18, 79,  -180180, 20, 81,  180180,  19,      82,      -180180,
    20, 83,  -180180, 23, 86,  180180,  30,      86,      -180180,
    24, 87,  180180,  31, 87,  -180180, 23,      88,      -180180,
    30, 88,  180180,  25, 90,  180180,  24,      91,      -180180,
    31, 91,  180180,  25, 92,  -180180, 21,      95,      180180,
    22, 96,  180180,  21, 97,  -180180, 24,      99,      180180,
    26, 99,  -180180, 22, 100, -180180, 24,      101,     -180180,
    26, 101, 180180,  23, 104, 180180,  24,      105,     180180,
    23, 106, -180180, 25, 108, 180180,  24,      109,     -180180,
    25, 110, -180180, 26, 113, 180180,  27,      114,     180180,
    26, 115, -180180, 28, 117, 180180,  27,      118,     -180180,
    28, 119, -180180, 32, 122, 144144,  33,      123,     144144,
    32, 124, -144144, 35, 126, 144144,  41,      126,     -144144,
    57, 126, 432432,  64, 126, -432432, 33,      127,     -144144,
    35, 128, -144144, 41, 128, 144144,  57,      128,     -432432,
    64, 128, 432432,  34, 131, 144144,  56,      131,     144144,
    35, 132, 144144,  57, 132, 288288,  64,      132,     -144144,
    34, 133, -144144, 56, 133, -144144, 37,      135,     144144,
    43, 135, -144144, 59, 135, 576576,  61,      135,     -288288,
    66, 135, -288288, 72, 135, -288288, 35,      136,     -144144,
    57, 136, -288288, 64, 136, 144144,  37,      137,     -144144,
    43, 137, 144144,  59, 137, -576576, 61,      137,     288288,
    66, 137, 288288,  72, 137, 288288,  41,      140,     144144,
    57, 140, -144144, 64, 140, 288288,  42,      141,     144144,
    65, 141, 144144,  41, 142, -144144, 57,      142,     144144,
    64, 142, -288288, 44, 144, 144144,  48,      144,     -144144,
    62, 144, 288288,  67, 144, 288288,  69,      144,     -576576,
    73, 144, -144144, 42, 145, -144144, 65,      145,     -144144,
    44, 146, -144144, 48, 146, 144144,  62,      146,     -288288,
    67, 146, -288288, 69, 146, 576576,  73,      146,     144144,
    34, 149, 144144,  56, 149, 144144,  35,      150,     144144,
    57, 150, 144144,  34, 151, -144144, 56,      151,     -144144,
    37, 153, 144144,  43, 153, -144144, 59,      153,     432432,
    61, 153, -144144, 66, 153, -288288, 72,      153,     -144144,
    35, 154, -144144, 57, 154, -144144, 37,      155,     -144144,
    43, 155, 144144,  59, 155, -432432, 61,      155,     144144,
    66, 155, 288288,  72, 155, 144144,  36,      158,     144144,
    58, 158, 144144,  37, 159, 144144,  59,      159,     288288,
    66, 159, -144144, 36, 160, -144144, 58,      160,     -144144,
    39, 162, 144144,  45, 162, -144144, 60,      162,     432432,
    74, 162, -432432, 37, 163, -144144, 59,      163,     -288288,
    66, 163, 144144,  39, 164, -144144, 45,      164,     144144,
    60, 164, -432432, 74, 164, 432432,  43,      167,     144144,
    59, 167, -144144, 61, 167, 144144,  66,      167,     144144,
    72, 167, 144144,  44, 168, 144144,  62,      168,     144144,
    73, 168, 144144,  43, 169, -144144, 59,      169,     144144,
    61, 169, -144144, 66, 169, -144144, 72,      169,     -144144,
    46, 171, 144144,  50, 171, -144144, 63,      171,     288288,
    68, 171, 144144,  77, 171, -288288, 44,      172,     -144144,
    62, 172, -144144, 73, 172, -144144, 46,      173,     -144144,
    50, 173, 144144,  63, 173, -288288, 68,      173,     -144144,
    77, 173, 288288,  41, 176, 144144,  64,      176,     144144,
    42, 177, 144144,  65, 177, 144144,  41,      178,     -144144,
    64, 178, -144144, 44, 180, 144144,  48,      180,     -144144,
    62, 180, 288288,  67, 180, 144144,  69,      180,     -432432,
    42, 181, -144144, 65, 181, -144144, 44,      182,     -144144,
    48, 182, 144144,  62, 182, -288288, 67,      182,     -144144,
    69, 182, 432432,  43, 185, 144144,  66,      185,     144144,
    44, 186, 144144,  62, 186, 144144,  67,      186,     144144,
    69, 186, -144144, 43, 187, -144144, 66,      187,     -144144,
    46, 189, 144144,  50, 189, -144144, 63,      189,     288288,
    68, 189, 144144,  77, 189, -288288, 44,      190,     -144144,
    62, 190, -144144, 67, 190, -144144, 69,      190,     144144,
    46, 191, -144144, 50, 191, 144144,  63,      191,     -288288,
    68, 191, -144144, 77, 191, 288288,  48,      194,     144144,
    62, 194, -144144, 69, 194, 288288,  49,      195,     144144,
    70, 195, 144144,  48, 196, -144144, 62,      196,     144144,
    69, 196, -288288, 51, 198, 144144,  53,      198,     -144144,
    71, 198, 288288,  78, 198, -144144, 49,      199,     -144144,
    70, 199, -144144, 51, 200, -144144, 53,      200,     144144,
    71, 200, -288288, 78, 200, 144144,  34,      203,     144144,
    35, 204, 144144,  34, 205, -144144, 37,      207,     144144,
    43, 207, -144144, 59, 207, 288288,  66,      207,     -288288,
    72, 207, -144144, 35, 208, -144144, 37,      209,     -144144,
    43, 209, 144144,  59, 209, -288288, 66,      209,     288288,
    72, 209, 144144,  36, 212, 144144,  37,      213,     144144,
    59, 213, 144144,  66, 213, -144144, 36,      214,     -144144,
    39, 216, 144144,  45, 216, -144144, 60,      216,     288288,
    74, 216, -432432, 37, 217, -144144, 59,      217,     -144144,
    66, 217, 144144,  39, 218, -144144, 45,      218,     144144,
    60, 218, -288288, 74, 218, 432432,  43,      221,     144144,
    59, 221, -144144, 66, 221, 144144,  72,      221,     144144,
    44, 222, 144144,  73, 222, 144144,  43,      223,     -144144,
    59, 223, 144144,  66, 223, -144144, 72,      223,     -144144,
    46, 225, 144144,  50, 225, -144144, 63,      225,     144144,
    68, 225, 144144,  77, 225, -288288, 44,      226,     -144144,
    73, 226, -144144, 46, 227, -144144, 50,      227,     144144,
    63, 227, -144144, 68, 227, -144144, 77,      227,     288288,
    36, 230, 144144,  37, 231, 144144,  36,      232,     -144144,
    39, 234, 144144,  45, 234, -144144, 60,      234,     144144,
    74, 234, -288288, 37, 235, -144144, 39,      236,     -144144,
    45, 236, 144144,  60, 236, -144144, 74,      236,     288288,
    38, 239, 144144,  39, 240, 144144,  38,      241,     -144144,
    40, 243, 144144,  39, 244, -144144, 40,      245,     -144144,
    45, 248, 144144,  60, 248, -144144, 74,      248,     288288,
    46, 249, 144144,  68, 249, -144144, 75,      249,     288288,
    45, 250, -144144, 60, 250, 144144,  74,      250,     -288288,
    47, 252, 144144,  76, 252, 144144,  46,      253,     -144144,
    68, 253, 144144,  75, 253, -288288, 47,      254,     -144144,
    76, 254, -144144, 43, 257, 144144,  72,      257,     144144,
    44, 258, 144144,  73, 258, 144144,  43,      259,     -144144,
    72, 259, -144144, 46, 261, 144144,  50,      261,     -144144,
    63, 261, 144144,  75, 261, 144144,  77,      261,     -288288,
    44, 262, -144144, 73, 262, -144144, 46,      263,     -144144,
    50, 263, 144144,  63, 263, -144144, 75,      263,     -144144,
    77, 263, 288288,  45, 266, 144144,  74,      266,     144144,
    46, 267, 144144,  75, 267, 144144,  45,      268,     -144144,
    74, 268, -144144, 47, 270, 144144,  76,      270,     144144,
    46, 271, -144144, 75, 271, -144144, 47,      272,     -144144,
    76, 272, -144144, 50, 275, 144144,  63,      275,     -144144,
    77, 275, 288288,  51, 276, 144144,  71,      276,     -144144,
    78, 276, 288288,  50, 277, -144144, 63,      277,     144144,
    77, 277, -288288, 52, 279, 144144,  79,      279,     144144,
    51, 280, -144144, 71, 280, 144144,  78,      280,     -288288,
    52, 281, -144144, 79, 281, -144144, 41,      284,     144144,
    42, 285, 144144,  41, 286, -144144, 44,      288,     144144,
    48, 288, -144144, 62, 288, 288288,  69,      288,     -288288,
    42, 289, -144144, 44, 290, -144144, 48,      290,     144144,
    62, 290, -288288, 69, 290, 288288,  43,      293,     144144,
    44, 294, 144144,  62, 294, 144144,  69,      294,     -144144,
    43, 295, -144144, 46, 297, 144144,  50,      297,     -144144,
    63, 297, 288288,  77, 297, -288288, 44,      298,     -144144,
    62, 298, -144144, 69, 298, 144144,  46,      299,     -144144,
    50, 299, 144144,  63, 299, -288288, 77,      299,     288288,
    48, 302, 144144,  62, 302, -144144, 69,      302,     144144,
    49, 303, 144144,  48, 304, -144144, 62,      304,     144144,
    69, 304, -144144, 51, 306, 144144,  53,      306,     -144144,
    71, 306, 144144,  78, 306, -144144, 49,      307,     -144144,
    51, 308, -144144, 53, 308, 144144,  71,      308,     -144144,
    78, 308, 144144,  43, 311, 144144,  44,      312,     144144,
    43, 313, -144144, 46, 315, 144144,  50,      315,     -144144,
    63, 315, 144144,  77, 315, -144144, 44,      316,     -144144,
    46, 317, -144144, 50, 317, 144144,  63,      317,     -144144,
    77, 317, 144144,  45, 320, 144144,  46,      321,     144144,
    45, 322, -144144, 47, 324, 144144,  46,      325,     -144144,
    47, 326, -144144, 50, 329, 144144,  63,      329,     -144144,
    77, 329, 144144,  51, 330, 144144,  71,      330,     -144144,
    78, 330, 144144,  50, 331, -144144, 63,      331,     144144,
    77, 331, -144144, 52, 333, 144144,  51,      334,     -144144,
    71, 334, 144144,  78, 334, -144144, 52,      335,     -144144,
    48, 338, 144144,  49, 339, 144144,  48,      340,     -144144,
    51, 342, 144144,  53, 342, -144144, 49,      343,     -144144,
    51, 344, -144144, 53, 344, 144144,  50,      347,     144144,
    51, 348, 144144,  50, 349, -144144, 52,      351,     144144,
    51, 352, -144144, 52, 353, -144144, 53,      356,     144144,
    54, 357, 144144,  53, 358, -144144, 55,      360,     144144,
    54, 361, -144144, 55, 362, -144144, 1000000, 1000000, 0 };

int sparseBasisD4[] = {
    0,  1,   720720,  1,  2,   720720,  2,      3,       720720,
    3,  4,   720720,  4,  6,   360360,  5,      7,       360360,
    6,  8,   360360,  4,  9,   -360360, 7,      11,      360360,
    8,  12,  360360,  5,  13,  -360360, 7,      14,      -360360,
    9,  16,  360360,  6,  17,  -360360, 8,      18,      -360360,
    9,  19,  -360360, 10, 22,  240240,  11,     23,      240240,
    12, 24,  240240,  10, 25,  -240240, 14,     27,      240240,
    18, 27,  -240240, 15, 28,  240240,  24,     28,      -240240,
    11, 29,  -240240, 14, 30,  -240240, 18,     30,      240240,
    20, 32,  240240,  25, 32,  -240240, 12,     33,      -240240,
    15, 34,  -240240, 24, 34,  240240,  20,     35,      -240240,
    25, 35,  240240,  13, 38,  240240,  14,     39,      240240,
    15, 40,  240240,  13, 41,  -240240, 16,     43,      240240,
    17, 44,  240240,  14, 45,  -240240, 16,     46,      -240240,
    22, 48,  240240,  27, 48,  -240240, 15,     49,      -240240,
    17, 50,  -240240, 22, 51,  -240240, 27,     51,      240240,
    18, 54,  240240,  19, 55,  240240,  20,     56,      240240,
    18, 57,  -240240, 21, 59,  240240,  22,     60,      240240,
    19, 61,  -240240, 21, 62,  -240240, 23,     64,      240240,
    20, 65,  -240240, 22, 66,  -240240, 23,     67,      -240240,
    24, 70,  240240,  25, 71,  240240,  26,     72,      240240,
    24, 73,  -240240, 27, 75,  240240,  28,     76,      240240,
    25, 77,  -240240, 27, 78,  -240240, 29,     80,      240240,
    26, 81,  -240240, 28, 82,  -240240, 29,     83,      -240240,
    30, 86,  180180,  31, 87,  180180,  32,     88,      180180,
    30, 89,  -180180, 34, 91,  180180,  41,     91,      -180180,
    75, 91,  360360,  35, 92,  180180,  55,     92,      -180180,
    76, 92,  360360,  31, 93,  -180180, 34,     94,      -180180,
    41, 94,  180180,  75, 94,  -360360, 43,     96,      180180,
    56, 96,  -180180, 80, 96,  360360,  32,     97,      -180180,
    35, 98,  -180180, 55, 98,  180180,  76,     98,      -360360,
    43, 99,  -180180, 56, 99,  180180,  80,     99,      -360360,
    33, 102, 180180,  34, 103, 180180,  75,     103,     180180,
    35, 104, 180180,  76, 104, 180180,  33,     105,     -180180,
    37, 107, 180180,  44, 107, -180180, 77,     107,     360360,
    38, 108, 180180,  58, 108, -180180, 78,     108,     360360,
    34, 109, -180180, 75, 109, -180180, 37,     110,     -180180,
    44, 110, 180180,  77, 110, -360360, 46,     112,     180180,
    59, 112, -180180, 79, 112, 180180,  82,     112,     180180,
    84, 112, -180180, 35, 113, -180180, 76,     113,     -180180,
    38, 114, -180180, 58, 114, 180180,  78,     114,     -360360,
    46, 115, -180180, 59, 115, 180180,  79,     115,     -180180,
    82, 115, -180180, 84, 115, 180180,  41,     118,     180180,
    75, 118, -180180, 42, 119, 180180,  43,     120,     180180,
    80, 120, 180180,  41, 121, -180180, 75,     121,     180180,
    45, 123, 180180,  49, 123, -180180, 81,     123,     180180,
    46, 124, 180180,  63, 124, -180180, 79,     124,     180180,
    82, 124, 180180,  42, 125, -180180, 45,     126,     -180180,
    49, 126, 180180,  81, 126, -180180, 51,     128,     180180,
    64, 128, -180180, 83, 128, 360360,  43,     129,     -180180,
    80, 129, -180180, 46, 130, -180180, 63,     130,     180180,
    79, 130, -180180, 82, 130, -180180, 51,     131,     -180180,
    64, 131, 180180,  83, 131, -360360, 55,     134,     180180,
    76, 134, -180180, 56, 135, 180180,  80,     135,     -180180,
    57, 136, 180180,  55, 137, -180180, 76,     137,     180180,
    59, 139, 180180,  63, 139, -180180, 84,     139,     180180,
    60, 140, 180180,  69, 140, -180180, 85,     140,     180180,
    56, 141, -180180, 80, 141, 180180,  59,     142,     -180180,
    63, 142, 180180,  84, 142, -180180, 65,     144,     180180,
    70, 144, -180180, 86, 144, 180180,  57,     145,     -180180,
    60, 146, -180180, 69, 146, 180180,  85,     146,     -180180,
    65, 147, -180180, 70, 147, 180180,  86,     147,     -180180,
    33, 150, 180180,  34, 151, 180180,  35,     152,     180180,
    33, 153, -180180, 37, 155, 180180,  44,     155,     -180180,
    77, 155, 180180,  38, 156, 180180,  58,     156,     -180180,
    78, 156, 180180,  34, 157, -180180, 37,     158,     -180180,
    44, 158, 180180,  77, 158, -180180, 46,     160,     180180,
    59, 160, -180180, 82, 160, 180180,  84,     160,     -180180,
    35, 161, -180180, 38, 162, -180180, 58,     162,     180180,
    78, 162, -180180, 46, 163, -180180, 59,     163,     180180,
    82, 163, -180180, 84, 163, 180180,  36,     166,     180180,
    37, 167, 180180,  38, 168, 180180,  36,     169,     -180180,
    39, 171, 180180,  40, 172, 180180,  37,     173,     -180180,
    39, 174, -180180, 48, 176, 180180,  61,     176,     -180180,
    87, 176, 360360,  38, 177, -180180, 40,     178,     -180180,
    48, 179, -180180, 61, 179, 180180,  87,     179,     -360360,
    44, 182, 180180,  77, 182, -180180, 45,     183,     180180,
    81, 183, -180180, 46, 184, 180180,  84,     184,     -180180,
    44, 185, -180180, 77, 185, 180180,  47,     187,     180180,
    48, 188, 180180,  87, 188, 180180,  45,     189,     -180180,
    81, 189, 180180,  47, 190, -180180, 53,     192,     180180,
    66, 192, -180180, 88, 192, 360360,  46,     193,     -180180,
    84, 193, 180180,  48, 194, -180180, 87,     194,     -180180,
    53, 195, -180180, 66, 195, 180180,  88,     195,     -360360,
    58, 198, 180180,  78, 198, -180180, 59,     199,     180180,
    82, 199, -180180, 60, 200, 180180,  85,     200,     -180180,
    58, 201, -180180, 78, 201, 180180,  61,     203,     180180,
    87, 203, -180180, 62, 204, 180180,  59,     205,     -180180,
    82, 205, 180180,  61, 206, -180180, 87,     206,     180180,
    67, 208, 180180,  72, 208, -180180, 89,     208,     180180,
    60, 209, -180180, 85, 209, 180180,  62,     210,     -180180,
    67, 211, -180180, 72, 211, 180180,  89,     211,     -180180,
    41, 214, 180180,  42, 215, 180180,  43,     216,     180180,
    41, 217, -180180, 45, 219, 180180,  49,     219,     -180180,
    46, 220, 180180,  63, 220, -180180, 79,     220,     180180,
    42, 221, -180180, 45, 222, -180180, 49,     222,     180180,
    51, 224, 180180,  64, 224, -180180, 83,     224,     180180,
    43, 225, -180180, 46, 226, -180180, 63,     226,     180180,
    79, 226, -180180, 51, 227, -180180, 64,     227,     180180,
    83, 227, -180180, 44, 230, 180180,  45,     231,     180180,
    46, 232, 180180,  44, 233, -180180, 47,     235,     180180,
    48, 236, 180180,  45, 237, -180180, 47,     238,     -180180,
    53, 240, 180180,  66, 240, -180180, 88,     240,     180180,
    46, 241, -180180, 48, 242, -180180, 53,     243,     -180180,
    66, 243, 180180,  88, 243, -180180, 49,     246,     180180,
    50, 247, 180180,  51, 248, 180180,  49,     249,     -180180,
    52, 251, 180180,  53, 252, 180180,  50,     253,     -180180,
    52, 254, -180180, 54, 256, 180180,  51,     257,     -180180,
    53, 258, -180180, 54, 259, -180180, 63,     262,     180180,
    79, 262, -180180, 64, 263, 180180,  83,     263,     -180180,
    65, 264, 180180,  86, 264, -180180, 63,     265,     -180180,
    79, 265, 180180,  66, 267, 180180,  88,     267,     -180180,
    67, 268, 180180,  89, 268, -180180, 64,     269,     -180180,
    83, 269, 180180,  66, 270, -180180, 88,     270,     180180,
    68, 272, 180180,  65, 273, -180180, 86,     273,     180180,
    67, 274, -180180, 89, 274, 180180,  68,     275,     -180180,
    55, 278, 180180,  56, 279, 180180,  57,     280,     180180,
    55, 281, -180180, 59, 283, 180180,  63,     283,     -180180,
    60, 284, 180180,  69, 284, -180180, 56,     285,     -180180,
    59, 286, -180180, 63, 286, 180180,  65,     288,     180180,
    70, 288, -180180, 57, 289, -180180, 60,     290,     -180180,
    69, 290, 180180,  65, 291, -180180, 70,     291,     180180,
    58, 294, 180180,  59, 295, 180180,  60,     296,     180180,
    58, 297, -180180, 61, 299, 180180,  62,     300,     180180,
    59, 301, -180180, 61, 302, -180180, 67,     304,     180180,
    72, 304, -180180, 60, 305, -180180, 62,     306,     -180180,
    67, 307, -180180, 72, 307, 180180,  63,     310,     180180,
    64, 311, 180180,  65, 312, 180180,  63,     313,     -180180,
    66, 315, 180180,  67, 316, 180180,  64,     317,     -180180,
    66, 318, -180180, 68, 320, 180180,  65,     321,     -180180,
    67, 322, -180180, 68, 323, -180180, 69,     326,     180180,
    70, 327, 180180,  71, 328, 180180,  69,     329,     -180180,
    72, 331, 180180,  73, 332, 180180,  70,     333,     -180180,
    72, 334, -180180, 74, 336, 180180,  71,     337,     -180180,
    73, 338, -180180, 74, 339, -180180, 100000, 1000000, 0
};

int sparseBasisD5[] = {
    0,  1,   720720,  1,       2,       720720,  2,  3,   720720,
    3,  4,   720720,  4,       5,       720720,  5,  7,   360360,
    6,  8,   360360,  7,       9,       360360,  8,  10,  360360,
    5,  11,  -360360, 9,       13,      360360,  10, 14,  360360,
    11, 15,  360360,  6,       16,      -360360, 9,  17,  -360360,
    12, 19,  360360,  13,      20,      360360,  7,  21,  -360360,
    10, 22,  -360360, 12,      23,      -360360, 14, 25,  360360,
    8,  26,  -360360, 11,      27,      -360360, 13, 28,  -360360,
    14, 29,  -360360, 15,      32,      240240,  16, 33,  240240,
    17, 34,  240240,  18,      35,      240240,  15, 36,  -240240,
    20, 38,  240240,  26,      38,      -240240, 21, 39,  240240,
    35, 39,  -240240, 22,      40,      240240,  45, 40,  -240240,
    16, 41,  -240240, 20,      42,      -240240, 26, 42,  240240,
    28, 44,  240240,  36,      44,      -240240, 29, 45,  240240,
    46, 45,  -240240, 17,      46,      -240240, 21, 47,  -240240,
    35, 47,  240240,  28,      48,      -240240, 36, 48,  240240,
    38, 50,  240240,  47,      50,      -240240, 18, 51,  -240240,
    22, 52,  -240240, 45,      52,      240240,  29, 53,  -240240,
    46, 53,  240240,  38,      54,      -240240, 47, 54,  240240,
    19, 57,  240240,  20,      58,      240240,  21, 59,  240240,
    22, 60,  240240,  19,      61,      -240240, 23, 63,  240240,
    24, 64,  240240,  25,      65,      240240,  20, 66,  -240240,
    23, 67,  -240240, 31,      69,      240240,  39, 69,  -240240,
    32, 70,  240240,  49,      70,      -240240, 21, 71,  -240240,
    24, 72,  -240240, 31,      73,      -240240, 39, 73,  240240,
    41, 75,  240240,  50,      75,      -240240, 22, 76,  -240240,
    25, 77,  -240240, 32,      78,      -240240, 49, 78,  240240,
    41, 79,  -240240, 50,      79,      240240,  26, 82,  240240,
    27, 83,  240240,  28,      84,      240240,  29, 85,  240240,
    26, 86,  -240240, 30,      88,      240240,  31, 89,  240240,
    32, 90,  240240,  27,      91,      -240240, 30, 92,  -240240,
    33, 94,  240240,  34,      95,      240240,  28, 96,  -240240,
    31, 97,  -240240, 33,      98,      -240240, 43, 100, 240240,
    52, 100, -240240, 29,      101,     -240240, 32, 102, -240240,
    34, 103, -240240, 43,      104,     -240240, 52, 104, 240240,
    35, 107, 240240,  36,      108,     240240,  37, 109, 240240,
    38, 110, 240240,  35,      111,     -240240, 39, 113, 240240,
    40, 114, 240240,  41,      115,     240240,  36, 116, -240240,
    39, 117, -240240, 42,      119,     240240,  43, 120, 240240,
    37, 121, -240240, 40,      122,     -240240, 42, 123, -240240,
    44, 125, 240240,  38,      126,     -240240, 41, 127, -240240,
    43, 128, -240240, 44,      129,     -240240, 45, 132, 240240,
    46, 133, 240240,  47,      134,     240240,  48, 135, 240240,
    45, 136, -240240, 49,      138,     240240,  50, 139, 240240,
    51, 140, 240240,  46,      141,     -240240, 49, 142, -240240,
    52, 144, 240240,  53,      145,     240240,  47, 146, -240240,
    50, 147, -240240, 52,      148,     -240240, 54, 150, 240240,
    48, 151, -240240, 51,      152,     -240240, 53, 153, -240240,
    54, 154, -240240, 1000000, 1000000, 0
};

int sparseBasisD6[] = {
    0,       1,       720720,  1,  2,  720720,  2,  3,  720720,
    3,       4,       720720,  4,  5,  720720,  5,  6,  720720,
    6,       8,       360360,  7,  9,  360360,  8,  10, 360360,
    9,       11,      360360,  10, 12, 360360,  6,  13, -360360,
    11,      15,      360360,  12, 16, 360360,  13, 17, 360360,
    14,      18,      360360,  7,  19, -360360, 11, 20, -360360,
    15,      22,      360360,  16, 23, 360360,  17, 24, 360360,
    8,       25,      -360360, 12, 26, -360360, 15, 27, -360360,
    18,      29,      360360,  19, 30, 360360,  9,  31, -360360,
    13,      32,      -360360, 16, 33, -360360, 18, 34, -360360,
    20,      36,      360360,  10, 37, -360360, 14, 38, -360360,
    17,      39,      -360360, 19, 40, -360360, 20, 41, -360360,
    1000000, 1000000, 0
};

void logSignature(float* path, int length, int d, int depth, float* sig) {
    std::vector<float> fullSig(sigdim(d, depth));
    std::vector<float> fullLogSig(sigdim(d, depth));
    signature(path, length, d, depth, &fullSig[0]);
    tensorLog(&fullSig[0], &fullLogSig[0], d, depth);

    for (int i = 0; i < logsigdim(d, depth); ++i)
        sig[i] = 0;
    if (d == 1) {
        for (int i = 0; sparseBasisD2[i + 1] < sigdim(d, depth); i += 3)
            sig[sparseBasisD2[i]] +=
            fullLogSig[sparseBasisD2[i + 1]] * sparseBasisD2[i + 2] / 720720.0f;
    }
    if (d == 2) {
        for (int i = 0; sparseBasisD2[i + 1] < sigdim(d, depth); i += 3)
            sig[sparseBasisD2[i]] +=
            fullLogSig[sparseBasisD2[i + 1]] * sparseBasisD2[i + 2] / 720720.0f;
    }
    if (d == 3) {
        for (int i = 0; sparseBasisD3[i + 1] < sigdim(d, depth); i += 3)
            sig[sparseBasisD3[i]] +=
            fullLogSig[sparseBasisD3[i + 1]] * sparseBasisD3[i + 2] / 720720.0f;
    }
    if (d == 4) {
        for (int i = 0; sparseBasisD4[i + 1] < sigdim(d, depth); i += 3)
            sig[sparseBasisD4[i]] +=
            fullLogSig[sparseBasisD4[i + 1]] * sparseBasisD4[i + 2] / 720720.0f;
    }
    if (d == 5) {
        for (int i = 0; sparseBasisD5[i + 1] < sigdim(d, depth); i += 3)
            sig[sparseBasisD5[i]] +=
            fullLogSig[sparseBasisD5[i + 1]] * sparseBasisD5[i + 2] / 720720.0f;
    }
    if (d == 6) {
        for (int i = 0; sparseBasisD6[i + 1] < sigdim(d, depth); i += 3)
            sig[sparseBasisD6[i]] +=
            fullLogSig[sparseBasisD6[i + 1]] * sparseBasisD6[i + 2] / 720720.0f;
    }
}

#endif _SIGNATURE_H
